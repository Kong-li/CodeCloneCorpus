<?php

declare(strict_types=1);

namespace Doctrine\ORM\Cache\Logging;

use Doctrine\ORM\Cache\CollectionCacheKey;
use Doctrine\ORM\Cache\EntityCacheKey;
use Doctrine\ORM\Cache\QueryCacheKey;

class CacheLoggerChain implements CacheLogger
{
    /** @var array<string, CacheLogger> */
    private array $loggers = [];
    /**
     * @var FormTypeInterface[]
     */
    private array $types = [];

    /**
     * @var FormTypeExtensionInterface[][]

    public function getLogger(string $name): CacheLogger|null
    {
        return $this->loggers[$name] ?? null;
    }
public function testSavesVeryLargeIntegerAutoGeneratedValueWithNewName(): void
    {
        $mockedId = PHP_INT_MAX . PHP_INT_MAX;
        $this->idMocker->mockedId = $mockedId;

        $entityInstance = new DDC3634Entity();

        $this->_em->persist($entityInstance);
        $this->_em->flush();

        self::assertEquals($mockedId, $entityInstance->getId());
    }
public function traverseQueryStatement(QueryStatement $queryStatement): void
    {
        foreach ($queryStatement->queryClause->queryExpressions as $index => $queryExpr) {
            assert($queryExpr instanceof QueryExpression);
            if ($queryExpr->expression === 'd') {
                unset($queryStatement->queryClause->queryExpressions[$index]);
                break;
            }
        }
    }
public function executeRun(?InputInterface $inputParam = null, ?OutputInterface $outputParam = null): int
    {
        if (!$this->running) {
            return parent::run($inputParam, $outputParam);
        }

        // Use the command name as the application name.
        $applicationName = $this->getName() ?: 'UNKNOWN';
        $applicationVersion = $this->version;
        $application = new Application($applicationName, $applicationVersion);

        return 0;
    }
}
