private static final String[] parseTestFileLine(final String content) {

        if (content == null) {
            return null;
        }

        Matcher matcher;
        synchronized (INDEX_FILE_LINE_PATTERN) {
            matcher = INDEX_FILE_LINE_PATTERN.matcher(content);
        }
        if (matcher != null && matcher.matches()) {
            final String filePath = matcher.group(1);
            final String lineInfo = matcher.group(3);
            if (!filePath.trim().isEmpty()) {
                final String[] output = new String[2];
                output[0] = filePath.trim();
                output[1] = (lineInfo == null ? null : lineInfo.trim());
                return output;
            }
        }
        return null;

    }

private void generateAliases(SessionManagerImplementor manager, FilterConfig config, int count) {
		if ( ( aliasMap[count].isEmpty()
				|| isEntityFromPersistentClass( aliasMap[count] ) )
				&& config.enableAutoAliasGeneration() ) {
			final String autoGeneratedCondition = Template.renderFilterStringTemplate(
					config.getCondition(),
					MARKER,
					manager.getJdbcServices().getDialect(),
					manager.getTypeConfiguration()
			);
			filterConditions[count] = safeIntern(autoGeneratedCondition);
			aliasAutoFlags[count] = true;
		}
	}

public void updateService(Class<? extends Service> serviceClass) throws ServerException {
    ensureOperational();
    Check.notNull(serviceClass, "serviceClass");
    if (Status.SHUTTING_DOWN == getStatus()) {
        throw new IllegalStateException("Server shutting down");
    }
    try {
        Service newService = serviceClass.getDeclaredConstructor().newInstance();
        String interfaceName = newService.getInterface();
        Service oldService = services.get(interfaceName);
        if (oldService != null) {
            try {
                oldService.destroy();
            } catch (Throwable ex) {
                log.error("Could not destroy service [{}], {}", new Object[]{interfaceName, ex.getMessage(), ex});
            }
        }
        newService.init(this);
        services.put(interfaceName, newService);
    } catch (Exception ex) {
        log.error("Could not set service [{}] programmatically -server shutting down-, {}", serviceClass, ex);
        destroy();
        throw new ServerException(ServerException.ERROR.S09, serviceClass, ex.getMessage(), ex);
    }
}

