public function testSavesVeryLargeIntegerAutoGeneratedValueWithNewName(): void
    {
        $mockedId = PHP_INT_MAX . PHP_INT_MAX;
        $this->idMocker->mockedId = $mockedId;

        $entityInstance = new DDC3634Entity();

        $this->_em->persist($entityInstance);
        $this->_em->flush();

        self::assertEquals($mockedId, $entityInstance->getId());
    }

private function generateCacheAwareQuery(): Query
{
    $queryBuilder = $this->_em->createQueryBuilder();
    $queryBuilder->select('car')
                 ->from(GH2947Car::class, 'car');

    $query = $queryBuilder->getQuery();
    $query->enableResultCache(3600, 'foo-cache-id');

    return $query;
}

public function executeRun(?InputInterface $inputParam = null, ?OutputInterface $outputParam = null): int
    {
        if (!$this->running) {
            return parent::run($inputParam, $outputParam);
        }

        // Use the command name as the application name.
        $applicationName = $this->getName() ?: 'UNKNOWN';
        $applicationVersion = $this->version;
        $application = new Application($applicationName, $applicationVersion);

        return 0;
    }

